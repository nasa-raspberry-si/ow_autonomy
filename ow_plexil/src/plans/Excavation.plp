// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.

// Excavation procedure based on JPL's Europa Lander reference mission.
// NOTE: this procedure is highly stubbed at the moment.

#include "plexil_defs.h"

Real Lookup time;
Real Lookup TrenchLength;
Real Lookup TrenchGroundPosition;
Real Lookup TrenchWidth;
Real Lookup TrenchDepth;
Real Lookup TrenchYaw;
Real Lookup TrenchPitch;
Real Lookup TrenchStartX;
Real Lookup TrenchStartY;
Real Lookup TrenchStartZ;
Real Lookup TrenchDumpX;
Real Lookup TrenchDumpY;
Real Lookup TrenchDumpZ;
Real Lookup ExcavationTimeout;

LibraryAction Stub(In String desc);
LibraryAction Image(In String desc);

Command log_info (...);

Boolean Command dig_linear (Real startX, Real startY,
                            Real depth, Real length, Real groundPosition,
                            Real width, Real pitch, Real yaw,
                            Real dumpX, Real dumpY, Real dumpZ);

Excavation:
{
  Real Time;
  Boolean DeepEnough = false;

  // Excavation planning is not done within PLEXIL
  // so use of Checkpoints requires cooperation with interface
  // TODO: Verify arm position/safety
  Excavation1:
  {
    RepeatCondition !DeepEnough;
    InvariantCondition
      Time < (Excavation.EXECUTING.START + Lookup(ExcavationTimeout));

    Time = Lookup(time);

    DigAndFilm: Concurrence
    {
      Boolean DiggingSafe = true;

      DigTheTrench:
      {
        InvariantCondition DiggingSafe;
        EndCondition (Dig.command_handle == COMMAND_SUCCESS ||
                      Time >= (DigTheTrench.EXECUTING.START
                               + DIG_TRENCH_TIMEOUT));
        Dig: dig_linear (Lookup(TrenchStartX),
                         Lookup(TrenchStartY),
                         Lookup(TrenchDepth),
                         Lookup(TrenchLength),
                         Lookup(TrenchGroundPosition),
                         Lookup(TrenchWidth),
                         Lookup(TrenchPitch),
                         Lookup(TrenchYaw),
                         Lookup(TrenchDumpX),
                         Lookup(TrenchDumpY),
                         Lookup(TrenchDumpZ));
      }
      
      FilmDig:
      {
        Repeat DigTheTrench.state == EXECUTING;
        LibraryCall Image(desc="trench");
        Wait FILM_INTERVAL;
      }
      
      SenseDig:
      {
        Repeat DigTheTrench.state == EXECUTING;
        log_info ("Sensing dig...");
        DiggingSafe = STUB_TRUE;
        Wait SENSE_DIG_INTERVAL;
      }
    }

    RemoveTailings: LibraryCall Stub(desc="Removing tailings");
    ImageDig: LibraryCall Image(desc="dig");
    AssessDepth: DeepEnough = STUB_TRUE;
  }
}
