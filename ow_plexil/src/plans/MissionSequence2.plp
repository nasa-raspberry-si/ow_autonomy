// The Notices and Disclaimers for Ocean Worlds Autonomy Testbed for Exploration
// Research and Simulation can be found in README.md in the root directory of
// this repository.


// A very basic sequence of actions, used in the fault handling patterns.

// NOTE: Since it is currently not possible to check the success/failure
// of lander commands or the current arm position, we instead use the
// temporary check "!Lookup(ArmFault) && !Lookup(PowerFault)" 
// (seen in UnstowArm and StowArm) for when relevant faults are resolved
// to denote that the arm has been unstowed or stowed.

// The assumption is that if the above Unstow()/Stow() has completed
// and there are no relevant faults, unstow/stow is most likely successfully 
// done.

// Limitation: If relevant faults are cleared before Unstow() or Stow() 
// finishes, successfully or otherwise, this check will incorrectly indicate
// completion of unstowing or stowing altogether.


#include "plan-interface.h"

MissionSequence2: 
{
  InOut Boolean mission_in_progress;
  InOut Boolean pan_done;
  InOut Boolean unstow_done;
  InOut Boolean stow_done; 

  PanAntenna:
  {
    Real PanToleranceDegrees = 1.0;

    Repeat !pan_done;
    Start !Lookup(AntennaFault) && !Lookup(PowerFault);
    Skip pan_done;

    LibraryCall Pan (Degrees=180);

    if abs(180 - abs(Lookup(PanDegrees))) < PanToleranceDegrees
    {
      pan_done = true;
    }

  }

  UnstowArm:
  {
    Repeat !unstow_done;
    Start !Lookup(ArmFault) && !Lookup(PowerFault);
    Skip unstow_done;

    LibraryCall Unstow(); 
      
    // See NOTE above for an explanation of logic.

    unstow_done = (!Lookup(ArmFault) && !Lookup(PowerFault));

  }

    
  StowArm:
  {
    Repeat !stow_done;
    Start !Lookup(ArmFault) && !Lookup(PowerFault);
    Skip stow_done;

    LibraryCall Stow();

    // See NOTE above for an explanation of logic.
      
    stow_done = (!Lookup(ArmFault) && !Lookup(PowerFault));
  
  }

  mission_in_progress = false;
}
